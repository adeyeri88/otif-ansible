---
# tasks file for install_pipeline

- name: Testing services depencies: Zookeeper, Kafka,  MongoDB & Crawler Admin
  wait_for:
    host: "{{ item.host }}"
    port: "{{ item.port }}"
    delay: 5
    timeout: 10
    state: started
  with_items:
    - { host: zookeeper_hostname, port: 2181 }
    - { host: kafka_hostname, port: 9092 }
    - { host: mongodb_hostname, port: 27017 }
    - { host: wsm-crawler_hostname, port: 10010 }
  register: wait

- name: Mount DVD at {{ default_installer_location }}. Ingestion Pipeline Installer is exepected to be there
  mount:
    path: "{{ default_installer_location }}"
    src: /dev/cdrom
    fstype: udf
    state: mounted

- name: Find Pipeline installer package in '{{ default_installer_location }}'
  find:
    paths: "{{ default_installer_location }}"
    patterns: "^.*pipeline-installer.*\\.bin$"
    use_regex: yes
  register: pipeline_installer

- fail:
    msg: "No Pipeline installer found in {{ default_installer_location }}"
  when: pipeline_installer.matched == 0 

- name: Install pexpect dependency
  become: true
  easy_install:
    name: "{{ item }}"
  with_items:
    - pexpect

- name: Make sure Pipeline is removed if it exists
  block:
    
    - name: Check if Pipeline is in the InstallAnywhere registry
      stat:
        path: /var/.com.zerog.registry.xml
      register: installanywhere_registry_is_there

    - name: If Registry is present ...
      block:

      - name: Look if Pipeline is already registred
        xml:
          path: /var/.com.zerog.registry.xml
          xpath: /registry/products/product//feature[@short_name='Pipeline']
          count: yes
        register: hits
        when: installanywhere_registry_is_there.stat.exists == true

      - name: Get location where Zookeeper is already installed
        xml:
          path: /var/.com.zerog.registry.xml
          xpath: /registry/products/product[@name='OpenText InfoFusion Ingestion Pipeline']
          content: attribute
          attribute: location
        register: pipeline_location
        when: hits.count > 0

      - debug:
          msg: "Pipeline is already installed in {{ pipeline_location.matches[0].product.location }}."
        when: hits.count > 0
    
      - name: Removing Ingestion Pipeline ...
        expect:
          command: "{{ pipeline_installer.files[0].path }} -i console"
          echo: yes
          timeout: 45
          responses: 
            .*Choose Instance Management Option.*: "2"
            .*Choose the instance to modify.*: "1"
            .*DEFAULT.*: "1"
            .*TO CONTINUE.*: ""  
        when: hits.count > 0
 
      - name: Removing Pipeline directory
        file:
          path: "{{ item }}"
          state: absent
        with_items:
          - "{{ pipeline_location.matches[0].product.location }}"        
        when: hits.count > 0

      when: installanywhere_registry_is_there.stat.exists == true

  when: remove_pipeline

#- pause:
#    prompt: "Pipeline should not be there!"

- debug:
    msg: "Pipeline will be installed using '{{ pipeline_installer.files[0].path }}'"

- debug:
    msg: "Pipeline will be installed in {{ pipeline_installtion_path }}"

#- pause:
#    prompt: "PRESS <ENTER> TO START"

- name: Executing Pipeline installer in console mode
  expect:
    command: "{{ pipeline_installer.files[0].path }} -i console"
    echo: yes
    timeout: 60
    responses:
      .*to reach the end of this text.*: "skip"
      PRESS \<ENTER\> TO CONTINUE: ""
      .*DO YOU ACCEPT THE TERMS.*: "Y"
      .*ENTER AN ABSOLUTE PATH.*: "{{ pipeline_installtion_path }}"
      .*IS THIS CORRECT.*: "Y"
      .*Current Host.*: ""
      .*Zookeeper Host.*: "{{ zookeeper_hostname }}"
      .*components to enable.*: "1,2,4"
      .*OTCA Host.*: "{{ text_mining_hostname }}"
      .*Kafka Host.*: "{{ kafka_hostname }}"
      .*Select the crawler.*: "1,2"
      .*MongoDB Host.*: "{{ mongodb_hostname }}"
      .*MongoDB Database.*: "{{ master_dbname }}"
      .*MongoDB User.*: "{{ master_username }}"
      .*Password.*: "{{ master_password }}"
      .*Web Crawler Admin Host.*: "{{ wsm_crawler_hostname }}"

      .*Confirm the database driver to use.*: "1"
      .*TO EXIT THE INSTALLER.*: ""
      .*TO ACCEPT THE DEFAULT.*: ""


