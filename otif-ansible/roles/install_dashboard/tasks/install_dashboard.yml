---
# tasks file for install_dashboard

- name: Wait until Zookeeper is listening on port 2181 (for service registry)
  wait_for:
    host: "{{ zookeeper_hostname }}"
    port: "{{ item.port }}"
    delay: 5
    timeout: 20
    state: started
  with_items:
    - { port: 2181 }
  register: wait

- name: Mount DVD at {{ default_installer_location }}. The Dashboard installer is meant to be there.
  mount:
    path: "{{ default_installer_location }}"
    src: /dev/cdrom
    fstype: udf
    state: mounted
  when: installation_method == "iso"

- name: Download Package ...
  block:

    - name: Make sure destination folder exists
      file:
        path: "{{ default_installer_location }}"
        state: directory
        recurse: yes

    - name: Download Dashboard from Nexus @ {{ download_dashboard }} ...
      get_url:
        url: "{{ download_dashboard }}"
        dest: "{{ default_installer_location }}/{{ download_dashboard | basename }}"
        mode: a+x

  when: installation_method == "download"

- name: Find dashboard package in '{{ default_installer_location }}'
  find:
    paths: "{{ default_installer_location }}"
    patterns: "^.*infofusion-dashboard.*\\.zip$"
    use_regex: yes
  register: found_installers

- fail:
    msg: "No Dashboard package found in {{ default_installer_location }}"
  when: found_installers.matched == 0

- name: Get latest file
  set_fact:
    dashboard_installer: "{{ found_installers.files | sort(attribute='mtime',reverse=true) | first }}"

#- pause:
#    prompt: "Dashboard installer: {{dashboard_installer.path}}"

- name: Create a group for admin user
  group:
    name: "{{ master_username }}"
    state: present

- name: Create a user that will run Dashboard deamon
  user:
    name: "{{ master_username }}"
    group: "{{ master_username }}"
    comment: "This user manages InfoFusion services"    
    state: present

- name: Add current user to admin group
  user:
    name: "{{ playbook_user }}"
    groups: "{{ master_username }}"
    state: present

- name: Install dependencies (unzip)
  yum:
    name: "{{ item }}"
    state: latest
  with_items:
    - "unzip"
   
- name: Make sure Dashboard is removed if it exists
  block:
    
    - name: Check if the otif-dashboard.service exists
      stat:
        path: /etc/systemd/system/otif-dashboard.service
      register: service_location

    - name: Stop service if it's there
      systemd:
        name: otif-dashboard
        state: stopped
      when: service_location.stat.exists == True    
 
    - name: Remove service
      file:
        path: "/etc/systemd/system/otif-dashboard.service"
        state: absent    

    - name: Remove dashbaord directory if it exists
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ dashboard_target_dir }}"        

- name: Creating PostgreSQL backup (support for PostgreSQL only)
      block:

        - name: Create backup folder if it does not exist
          file:
            path: "{{ default_installation_path }}/postgres_backup"
            state: directory
            mode: "u=rw,g=r,o=r"

        - name: Backup database {{ master_dbname }}_dasboard (create a backup in folder {{ default_installation_path }}/postgres_backup/)
          postgresql_db:
            name: "{{ master_dbname }}_dashboard"
            login_user: "{{ master_username }}"
            login_password: "{{ master_password }}"
            state: dump
            target: "{{ default_installation_path }}/postgres_backup/psql-{{ansible_hostname}}-{{ master_dbname }}_dashboard.{{ timestamp }}.sql.gz"

        - debug:
            msg: |
              Backup created in {{ default_installation_path }}/postgres_backup/.
              Can be used with pg_restore.

      when: backup_database and custom_data_location is not defined

    - name: Drop database (support for PostgreSQL only)
      postgresql_db:
        login_user: "postgres"
        login_password: "{{psql_admin_password}}"
        name: "{{master_dbname}}_dashboard"
        state: absent
 
    - pause:
        prompt: "Dashbaord should have been removed."
      when: with_pause

  when: remove_dashboard

- name: Make sure target directory exists
  file:
    path: "{{ dashboard_target_dir }}"
    state: directory
    mode: 0744
    owner: "{{ master_username }}"
    group: "{{ master_username }}"

- name: Unzip dashboard binaries (from "{{ dashboard_installer.path }}" to "{{ dashboard_target_dir }}") 
  unarchive:
    remote_src: yes
    src: "{{ dashboard_installer.path }}"
    dest: "{{ dashboard_target_dir }}"
    keep_newer: yes
    owner: "{{ master_username }}"
    group: "{{ master_username }}"
    mode: 0774

