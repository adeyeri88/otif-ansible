---
# tasks file for install_text_mining

- name: Wait until Zookeeper is listening on port 2181 (for service registry)
  wait_for:
    host: "{{ zookeeper_hostname }}"
    port: "{{ item.port }}"
    delay: 5
    timeout: 20
    state: started
  with_items:
    - { port: 2181 }
  register: wait

- name: Mount DVD at {{ default_installer_location }}. The Pipeline installer is meant to be there.
  mount:
    path: "{{ default_installer_location }}"
    src: /dev/cdrom
    fstype: udf
    state: mounted
  when: installation_method == "iso"

- name: Download Package ...
  block:

    - name: Make sure destination folder exists
      file:
        path: "{{ default_installer_location }}"
        state: directory
        recurse: yes

    - name: Download Text Mining binaries from Nexus @ {{ download_text_mining_bin }} ...
      get_url:
        url: "{{ download_text_mining_bin }}"
        dest: "{{ default_installer_location }}/{{ download_text_mining_bin | basename }}"
        mode: a+x

    - name: Download Text Mining Data from Nexus @ {{ download_text_mining_data }} ...
      get_url:
        url: "{{ download_text_mining_data }}"
        dest: "{{ default_installer_location }}/{{ download_text_mining_data | basename }}"
        mode: a+x
   
  when: installation_method == "download"

- name: Find TME binary  package in '{{ default_installer_location }}'
  find:
    paths: "{{ default_installer_location }}"
    patterns: "^.*tme.*-bin\\.zip$"
    use_regex: yes
  register: tmebin_installer

- name: Find TME data package in '{{ default_installer_location }}'
  find:
    paths: "{{ default_installer_location }}"
    patterns: "^.*tme.*-data\\.zip$"
    use_regex: yes
  register: tmedata_installer

- fail:
    msg: "No Text Mining Engine installer found in {{ default_installer_location }}"
  when: tmebin_installer.matched == 0

- fail:
    msg: "No Text Mining data package found in {{ default_installer_location }}"
  when: tmedata_installer.matched == 0

- set_fact:
    tme_package_basename: "{{ tmebin_installer.files[0].path | basename | regex_replace('\\-bin\\.[^.]+$') }}"

- debug:
    var: tme_package_basename

- name: Create a group for admin user
  group:
    name: "{{ master_username }}"
    state: present

- name: Create a user that will run TME deamon
  user:
    name: "{{ master_username }}"
    group: "{{ master_username }}"
    comment: "This user manages InfoFusion Text Mining deamon"    
    state: present

- name: Add current user to admin group
  user:
    name: "{{ playbook_user }}"
    groups: "{{ master_username }}"
    state: present

- name: Install dependencies (unzip)
  yum:
    name: "{{ item }}"
    state: latest
  with_items:
    - "unzip"
   
- name: Make sure Text Mining Engine is removed if it exists
  block:
    
    - name: Check if the otif-text-mining.service exists
      stat:
        path: /etc/systemd/system/otif-text-mining.service
      register: service_location

    - name: Stop service if it's there
      systemd:
        name: otif-text-mining
        state: stopped
      when: service_location.stat.exists == True    
 
    - name: Remove service
      file:
        path: "/etc/systemd/system/otif-text-mining.service"
        state: absent    

    - name: Remove TME directory if it exists
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ tme_target_dir }}/{{ tme_package_basename }}"        

    - pause:
        prompt: "Text Mining Engine should have been removed removed."
      when: with_pause

  when: remove_text_mining

- name: Make sure target directory exists
  file:
    path: "{{ tme_target_dir }}"
    state: directory
    mode: 0744
    owner: "{{ master_username }}"
    group: "{{ master_username }}"

- name: Unzip TME binaries (from "{{ tmebin_installer.files[0].path }}" to "{{ tme_target_dir }}") 
  unarchive:
    remote_src: yes
    src: "{{ tmebin_installer.files[0].path }}"
    dest: "{{ tme_target_dir }}"
    keep_newer: yes
    owner: "{{ master_username }}"
    group: "{{ master_username }}"
    mode: 0774

- name: Unzip TME data (from "{{ tmedata_installer.files[0].path }}" to "{{ tme_target_dir }}/{{ tme_package_basename }}") ... hold on! It takes a while depending on i/o and network latency (2-5 minutes)
  unarchive:
    remote_src: yes
    src: "{{ tmedata_installer.files[0].path }}"
    dest: "{{ tme_target_dir }}/{{ tme_package_basename }}"
    keep_newer: yes
    owner: "{{ master_username }}"
    group: "{{ master_username }}"
    mode: 0774
  when: not skip_data



